type AnnotationsTag {
  annotationId: Int!
  tagId: Int!

  """Reads a single `Tag` that is related to this `AnnotationsTag`."""
  tagByTagId: Tag
}

"""
A condition to be used against `AnnotationsTag` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AnnotationsTagCondition {
  """Checks for equality with the object’s `annotationId` field."""
  annotationId: Int

  """Checks for equality with the object’s `tagId` field."""
  tagId: Int
}

"""An input for mutations affecting `AnnotationsTag`"""
input AnnotationsTagInput {
  annotationId: Int!
  tagId: Int!
}

"""
Represents an update to a `AnnotationsTag`. Fields that are set will be updated.
"""
input AnnotationsTagPatch {
  annotationId: Int
  tagId: Int
}

"""A connection to a list of `AnnotationsTag` values."""
type AnnotationsTagsConnection {
  """A list of `AnnotationsTag` objects."""
  nodes: [AnnotationsTag]!

  """
  A list of edges which contains the `AnnotationsTag` and cursor to aid in pagination.
  """
  edges: [AnnotationsTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AnnotationsTag` you could get from the connection."""
  totalCount: Int!
}

"""A `AnnotationsTag` edge in the connection."""
type AnnotationsTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AnnotationsTag` at the end of the edge."""
  node: AnnotationsTag
}

"""Methods to use when ordering `AnnotationsTag`."""
enum AnnotationsTagsOrderBy {
  NATURAL
  ANNOTATION_ID_ASC
  ANNOTATION_ID_DESC
  TAG_ID_ASC
  TAG_ID_DESC
}

type Book implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  completedBool: Boolean!
  isbn: String
  goodreadsDetailsId: Int
  calibreMetadataId: Int

  """Reads a single `GoodreadsDetail` that is related to this `Book`."""
  goodreadsDetailByGoodreadsDetailsId: GoodreadsDetail

  """Reads a single `CalibreMetadatum` that is related to this `Book`."""
  calibreMetadatumByCalibreMetadataId: CalibreMetadatum
}

"""
A condition to be used against `Book` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BookCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `completedBool` field."""
  completedBool: Boolean

  """Checks for equality with the object’s `isbn` field."""
  isbn: String

  """Checks for equality with the object’s `goodreadsDetailsId` field."""
  goodreadsDetailsId: Int

  """Checks for equality with the object’s `calibreMetadataId` field."""
  calibreMetadataId: Int
}

"""An input for mutations affecting `Book`"""
input BookInput {
  id: Int
  title: String!
  completedBool: Boolean!
  isbn: String
  goodreadsDetailsId: Int
  calibreMetadataId: Int
}

"""Represents an update to a `Book`. Fields that are set will be updated."""
input BookPatch {
  id: Int
  title: String
  completedBool: Boolean
  isbn: String
  goodreadsDetailsId: Int
  calibreMetadataId: Int
}

"""A connection to a list of `Book` values."""
type BooksConnection {
  """A list of `Book` objects."""
  nodes: [Book]!

  """
  A list of edges which contains the `Book` and cursor to aid in pagination.
  """
  edges: [BooksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Book` you could get from the connection."""
  totalCount: Int!
}

"""A `Book` edge in the connection."""
type BooksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Book` at the end of the edge."""
  node: Book
}

"""Methods to use when ordering `Book`."""
enum BooksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  COMPLETED_BOOL_ASC
  COMPLETED_BOOL_DESC
  ISBN_ASC
  ISBN_DESC
  GOODREADS_DETAILS_ID_ASC
  GOODREADS_DETAILS_ID_DESC
  CALIBRE_METADATA_ID_ASC
  CALIBRE_METADATA_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CalibreAuthor implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  author: String
  authorSort: String

  """Reads and enables pagination through a set of `CalibreAuthorsBook`."""
  calibreAuthorsBooksByAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CalibreAuthorsBook`."""
    orderBy: [CalibreAuthorsBooksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CalibreAuthorsBookCondition
  ): CalibreAuthorsBooksConnection!
}

"""
A condition to be used against `CalibreAuthor` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CalibreAuthorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `author` field."""
  author: String

  """Checks for equality with the object’s `authorSort` field."""
  authorSort: String
}

"""An input for mutations affecting `CalibreAuthor`"""
input CalibreAuthorInput {
  id: Int
  author: String
  authorSort: String
}

"""
Represents an update to a `CalibreAuthor`. Fields that are set will be updated.
"""
input CalibreAuthorPatch {
  id: Int
  author: String
  authorSort: String
}

type CalibreAuthorsBook implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  authorId: Int!
  bookId: Int!

  """
  Reads a single `CalibreAuthor` that is related to this `CalibreAuthorsBook`.
  """
  calibreAuthorByAuthorId: CalibreAuthor

  """
  Reads a single `CalibreMetadatum` that is related to this `CalibreAuthorsBook`.
  """
  calibreMetadatumByBookId: CalibreMetadatum
}

"""
A condition to be used against `CalibreAuthorsBook` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CalibreAuthorsBookCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `bookId` field."""
  bookId: Int
}

"""An input for mutations affecting `CalibreAuthorsBook`"""
input CalibreAuthorsBookInput {
  authorId: Int!
  bookId: Int!
}

"""
Represents an update to a `CalibreAuthorsBook`. Fields that are set will be updated.
"""
input CalibreAuthorsBookPatch {
  authorId: Int
  bookId: Int
}

"""A connection to a list of `CalibreAuthorsBook` values."""
type CalibreAuthorsBooksConnection {
  """A list of `CalibreAuthorsBook` objects."""
  nodes: [CalibreAuthorsBook]!

  """
  A list of edges which contains the `CalibreAuthorsBook` and cursor to aid in pagination.
  """
  edges: [CalibreAuthorsBooksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CalibreAuthorsBook` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CalibreAuthorsBook` edge in the connection."""
type CalibreAuthorsBooksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CalibreAuthorsBook` at the end of the edge."""
  node: CalibreAuthorsBook
}

"""Methods to use when ordering `CalibreAuthorsBook`."""
enum CalibreAuthorsBooksOrderBy {
  NATURAL
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  BOOK_ID_ASC
  BOOK_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `CalibreAuthor` values."""
type CalibreAuthorsConnection {
  """A list of `CalibreAuthor` objects."""
  nodes: [CalibreAuthor]!

  """
  A list of edges which contains the `CalibreAuthor` and cursor to aid in pagination.
  """
  edges: [CalibreAuthorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CalibreAuthor` you could get from the connection."""
  totalCount: Int!
}

"""A `CalibreAuthor` edge in the connection."""
type CalibreAuthorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CalibreAuthor` at the end of the edge."""
  node: CalibreAuthor
}

"""Methods to use when ordering `CalibreAuthor`."""
enum CalibreAuthorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  AUTHOR_ASC
  AUTHOR_DESC
  AUTHOR_SORT_ASC
  AUTHOR_SORT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `CalibreMetadatum` values."""
type CalibreMetadataConnection {
  """A list of `CalibreMetadatum` objects."""
  nodes: [CalibreMetadatum]!

  """
  A list of edges which contains the `CalibreMetadatum` and cursor to aid in pagination.
  """
  edges: [CalibreMetadataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CalibreMetadatum` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CalibreMetadatum` edge in the connection."""
type CalibreMetadataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CalibreMetadatum` at the end of the edge."""
  node: CalibreMetadatum
}

"""Methods to use when ordering `CalibreMetadatum`."""
enum CalibreMetadataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ISBN_ASC
  ISBN_DESC
  AMAZON_ASC
  AMAZON_DESC
  TITLE_ASC
  TITLE_DESC
  TITLE_SORT_ASC
  TITLE_SORT_DESC
  PUBLISHER_ASC
  PUBLISHER_DESC
  PUBDATE_ASC
  PUBDATE_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  COVER_ASC
  COVER_DESC
  SERIES_ASC
  SERIES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CalibreMetadatum implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  isbn: String
  amazon: String
  title: String
  titleSort: String
  publisher: String
  pubdate: Date
  comments: String
  cover: Boolean
  series: String

  """Reads and enables pagination through a set of `Book`."""
  booksByCalibreMetadataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Book`."""
    orderBy: [BooksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookCondition
  ): BooksConnection!

  """Reads and enables pagination through a set of `CalibreAuthorsBook`."""
  calibreAuthorsBooksByBookId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CalibreAuthorsBook`."""
    orderBy: [CalibreAuthorsBooksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CalibreAuthorsBookCondition
  ): CalibreAuthorsBooksConnection!
}

"""
A condition to be used against `CalibreMetadatum` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CalibreMetadatumCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isbn` field."""
  isbn: String

  """Checks for equality with the object’s `amazon` field."""
  amazon: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `titleSort` field."""
  titleSort: String

  """Checks for equality with the object’s `publisher` field."""
  publisher: String

  """Checks for equality with the object’s `pubdate` field."""
  pubdate: Date

  """Checks for equality with the object’s `comments` field."""
  comments: String

  """Checks for equality with the object’s `cover` field."""
  cover: Boolean

  """Checks for equality with the object’s `series` field."""
  series: String
}

"""An input for mutations affecting `CalibreMetadatum`"""
input CalibreMetadatumInput {
  id: Int
  isbn: String
  amazon: String
  title: String
  titleSort: String
  publisher: String
  pubdate: Date
  comments: String
  cover: Boolean
  series: String
}

"""
Represents an update to a `CalibreMetadatum`. Fields that are set will be updated.
"""
input CalibreMetadatumPatch {
  id: Int
  isbn: String
  amazon: String
  title: String
  titleSort: String
  publisher: String
  pubdate: Date
  comments: String
  cover: Boolean
  series: String
}

"""All input for the create `AnnotationsTag` mutation."""
input CreateAnnotationsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AnnotationsTag` to be created by this mutation."""
  annotationsTag: AnnotationsTagInput!
}

"""The output of our create `AnnotationsTag` mutation."""
type CreateAnnotationsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AnnotationsTag` that was created by this mutation."""
  annotationsTag: AnnotationsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `AnnotationsTag`."""
  tagByTagId: Tag

  """An edge for our `AnnotationsTag`. May be used by Relay 1."""
  annotationsTagEdge(
    """The method to use when ordering `AnnotationsTag`."""
    orderBy: [AnnotationsTagsOrderBy!] = [NATURAL]
  ): AnnotationsTagsEdge
}

"""All input for the create `Book` mutation."""
input CreateBookInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Book` to be created by this mutation."""
  book: BookInput!
}

"""The output of our create `Book` mutation."""
type CreateBookPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Book` that was created by this mutation."""
  book: Book

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GoodreadsDetail` that is related to this `Book`."""
  goodreadsDetailByGoodreadsDetailsId: GoodreadsDetail

  """Reads a single `CalibreMetadatum` that is related to this `Book`."""
  calibreMetadatumByCalibreMetadataId: CalibreMetadatum

  """An edge for our `Book`. May be used by Relay 1."""
  bookEdge(
    """The method to use when ordering `Book`."""
    orderBy: [BooksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BooksEdge
}

"""All input for the create `CalibreAuthor` mutation."""
input CreateCalibreAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CalibreAuthor` to be created by this mutation."""
  calibreAuthor: CalibreAuthorInput!
}

"""The output of our create `CalibreAuthor` mutation."""
type CreateCalibreAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CalibreAuthor` that was created by this mutation."""
  calibreAuthor: CalibreAuthor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CalibreAuthor`. May be used by Relay 1."""
  calibreAuthorEdge(
    """The method to use when ordering `CalibreAuthor`."""
    orderBy: [CalibreAuthorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalibreAuthorsEdge
}

"""All input for the create `CalibreAuthorsBook` mutation."""
input CreateCalibreAuthorsBookInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CalibreAuthorsBook` to be created by this mutation."""
  calibreAuthorsBook: CalibreAuthorsBookInput!
}

"""The output of our create `CalibreAuthorsBook` mutation."""
type CreateCalibreAuthorsBookPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CalibreAuthorsBook` that was created by this mutation."""
  calibreAuthorsBook: CalibreAuthorsBook

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CalibreAuthor` that is related to this `CalibreAuthorsBook`.
  """
  calibreAuthorByAuthorId: CalibreAuthor

  """
  Reads a single `CalibreMetadatum` that is related to this `CalibreAuthorsBook`.
  """
  calibreMetadatumByBookId: CalibreMetadatum

  """An edge for our `CalibreAuthorsBook`. May be used by Relay 1."""
  calibreAuthorsBookEdge(
    """The method to use when ordering `CalibreAuthorsBook`."""
    orderBy: [CalibreAuthorsBooksOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalibreAuthorsBooksEdge
}

"""All input for the create `CalibreMetadatum` mutation."""
input CreateCalibreMetadatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CalibreMetadatum` to be created by this mutation."""
  calibreMetadatum: CalibreMetadatumInput!
}

"""The output of our create `CalibreMetadatum` mutation."""
type CreateCalibreMetadatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CalibreMetadatum` that was created by this mutation."""
  calibreMetadatum: CalibreMetadatum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CalibreMetadatum`. May be used by Relay 1."""
  calibreMetadatumEdge(
    """The method to use when ordering `CalibreMetadatum`."""
    orderBy: [CalibreMetadataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalibreMetadataEdge
}

"""All input for the create `GoodreadsDetail` mutation."""
input CreateGoodreadsDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GoodreadsDetail` to be created by this mutation."""
  goodreadsDetail: GoodreadsDetailInput!
}

"""The output of our create `GoodreadsDetail` mutation."""
type CreateGoodreadsDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GoodreadsDetail` that was created by this mutation."""
  goodreadsDetail: GoodreadsDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GoodreadsDetail`. May be used by Relay 1."""
  goodreadsDetailEdge(
    """The method to use when ordering `GoodreadsDetail`."""
    orderBy: [GoodreadsDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoodreadsDetailsEdge
}

"""All input for the create `KindleAnnotation` mutation."""
input CreateKindleAnnotationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `KindleAnnotation` to be created by this mutation."""
  kindleAnnotation: KindleAnnotationInput!
}

"""The output of our create `KindleAnnotation` mutation."""
type CreateKindleAnnotationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KindleAnnotation` that was created by this mutation."""
  kindleAnnotation: KindleAnnotation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KindleAnnotation`. May be used by Relay 1."""
  kindleAnnotationEdge(
    """The method to use when ordering `KindleAnnotation`."""
    orderBy: [KindleAnnotationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KindleAnnotationsEdge
}

"""All input for the create `Tag` mutation."""
input CreateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tag` to be created by this mutation."""
  tag: TagInput!
}

"""The output of our create `Tag` mutation."""
type CreateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tag` that was created by this mutation."""
  tag: Tag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
All input for the `deleteAnnotationsTagByAnnotationIdAndTagId` mutation.
"""
input DeleteAnnotationsTagByAnnotationIdAndTagIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  annotationId: Int!
  tagId: Int!
}

"""The output of our delete `AnnotationsTag` mutation."""
type DeleteAnnotationsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AnnotationsTag` that was deleted by this mutation."""
  annotationsTag: AnnotationsTag
  deletedAnnotationsTagId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `AnnotationsTag`."""
  tagByTagId: Tag

  """An edge for our `AnnotationsTag`. May be used by Relay 1."""
  annotationsTagEdge(
    """The method to use when ordering `AnnotationsTag`."""
    orderBy: [AnnotationsTagsOrderBy!] = [NATURAL]
  ): AnnotationsTagsEdge
}

"""All input for the `deleteBookById` mutation."""
input DeleteBookByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteBookByTitle` mutation."""
input DeleteBookByTitleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  title: String!
}

"""All input for the `deleteBook` mutation."""
input DeleteBookInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Book` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Book` mutation."""
type DeleteBookPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Book` that was deleted by this mutation."""
  book: Book
  deletedBookId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GoodreadsDetail` that is related to this `Book`."""
  goodreadsDetailByGoodreadsDetailsId: GoodreadsDetail

  """Reads a single `CalibreMetadatum` that is related to this `Book`."""
  calibreMetadatumByCalibreMetadataId: CalibreMetadatum

  """An edge for our `Book`. May be used by Relay 1."""
  bookEdge(
    """The method to use when ordering `Book`."""
    orderBy: [BooksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BooksEdge
}

"""All input for the `deleteCalibreAuthorByAuthor` mutation."""
input DeleteCalibreAuthorByAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  author: String!
}

"""All input for the `deleteCalibreAuthorById` mutation."""
input DeleteCalibreAuthorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCalibreAuthor` mutation."""
input DeleteCalibreAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CalibreAuthor` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CalibreAuthor` mutation."""
type DeleteCalibreAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CalibreAuthor` that was deleted by this mutation."""
  calibreAuthor: CalibreAuthor
  deletedCalibreAuthorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CalibreAuthor`. May be used by Relay 1."""
  calibreAuthorEdge(
    """The method to use when ordering `CalibreAuthor`."""
    orderBy: [CalibreAuthorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalibreAuthorsEdge
}

"""
All input for the `deleteCalibreAuthorsBookByAuthorIdAndBookId` mutation.
"""
input DeleteCalibreAuthorsBookByAuthorIdAndBookIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  authorId: Int!
  bookId: Int!
}

"""All input for the `deleteCalibreAuthorsBook` mutation."""
input DeleteCalibreAuthorsBookInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CalibreAuthorsBook` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CalibreAuthorsBook` mutation."""
type DeleteCalibreAuthorsBookPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CalibreAuthorsBook` that was deleted by this mutation."""
  calibreAuthorsBook: CalibreAuthorsBook
  deletedCalibreAuthorsBookId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CalibreAuthor` that is related to this `CalibreAuthorsBook`.
  """
  calibreAuthorByAuthorId: CalibreAuthor

  """
  Reads a single `CalibreMetadatum` that is related to this `CalibreAuthorsBook`.
  """
  calibreMetadatumByBookId: CalibreMetadatum

  """An edge for our `CalibreAuthorsBook`. May be used by Relay 1."""
  calibreAuthorsBookEdge(
    """The method to use when ordering `CalibreAuthorsBook`."""
    orderBy: [CalibreAuthorsBooksOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalibreAuthorsBooksEdge
}

"""All input for the `deleteCalibreMetadatumById` mutation."""
input DeleteCalibreMetadatumByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCalibreMetadatumByIsbn` mutation."""
input DeleteCalibreMetadatumByIsbnInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  isbn: String!
}

"""All input for the `deleteCalibreMetadatum` mutation."""
input DeleteCalibreMetadatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CalibreMetadatum` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CalibreMetadatum` mutation."""
type DeleteCalibreMetadatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CalibreMetadatum` that was deleted by this mutation."""
  calibreMetadatum: CalibreMetadatum
  deletedCalibreMetadatumId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CalibreMetadatum`. May be used by Relay 1."""
  calibreMetadatumEdge(
    """The method to use when ordering `CalibreMetadatum`."""
    orderBy: [CalibreMetadataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalibreMetadataEdge
}

"""All input for the `deleteGoodreadsDetailById` mutation."""
input DeleteGoodreadsDetailByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteGoodreadsDetail` mutation."""
input DeleteGoodreadsDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GoodreadsDetail` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `GoodreadsDetail` mutation."""
type DeleteGoodreadsDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GoodreadsDetail` that was deleted by this mutation."""
  goodreadsDetail: GoodreadsDetail
  deletedGoodreadsDetailId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GoodreadsDetail`. May be used by Relay 1."""
  goodreadsDetailEdge(
    """The method to use when ordering `GoodreadsDetail`."""
    orderBy: [GoodreadsDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoodreadsDetailsEdge
}

"""All input for the `deleteKindleAnnotationById` mutation."""
input DeleteKindleAnnotationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteKindleAnnotation` mutation."""
input DeleteKindleAnnotationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KindleAnnotation` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `KindleAnnotation` mutation."""
type DeleteKindleAnnotationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KindleAnnotation` that was deleted by this mutation."""
  kindleAnnotation: KindleAnnotation
  deletedKindleAnnotationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KindleAnnotation`. May be used by Relay 1."""
  kindleAnnotationEdge(
    """The method to use when ordering `KindleAnnotation`."""
    orderBy: [KindleAnnotationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KindleAnnotationsEdge
}

"""All input for the `deleteTagById` mutation."""
input DeleteTagByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTagByTag` mutation."""
input DeleteTagByTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tag: String!
}

"""All input for the `deleteTag` mutation."""
input DeleteTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Tag` mutation."""
type DeleteTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tag` that was deleted by this mutation."""
  tag: Tag
  deletedTagId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `deleteUserByEmail` mutation."""
input DeleteUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type GoodreadsDetail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  isbn13: String
  kindleAsin: String
  marketplaceId: String
  imageUrl: String
  languageCode: String
  publisher: String
  publicationYear: String
  publicationMonth: String
  publicationDay: String
  isEbook: Boolean
  description: String

  """Reads and enables pagination through a set of `Book`."""
  booksByGoodreadsDetailsId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Book`."""
    orderBy: [BooksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookCondition
  ): BooksConnection!
}

"""
A condition to be used against `GoodreadsDetail` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GoodreadsDetailCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `isbn13` field."""
  isbn13: String

  """Checks for equality with the object’s `kindleAsin` field."""
  kindleAsin: String

  """Checks for equality with the object’s `marketplaceId` field."""
  marketplaceId: String

  """Checks for equality with the object’s `imageUrl` field."""
  imageUrl: String

  """Checks for equality with the object’s `languageCode` field."""
  languageCode: String

  """Checks for equality with the object’s `publisher` field."""
  publisher: String

  """Checks for equality with the object’s `publicationYear` field."""
  publicationYear: String

  """Checks for equality with the object’s `publicationMonth` field."""
  publicationMonth: String

  """Checks for equality with the object’s `publicationDay` field."""
  publicationDay: String

  """Checks for equality with the object’s `isEbook` field."""
  isEbook: Boolean

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""An input for mutations affecting `GoodreadsDetail`"""
input GoodreadsDetailInput {
  id: Int
  title: String!
  isbn13: String
  kindleAsin: String
  marketplaceId: String
  imageUrl: String
  languageCode: String
  publisher: String
  publicationYear: String
  publicationMonth: String
  publicationDay: String
  isEbook: Boolean
  description: String
}

"""
Represents an update to a `GoodreadsDetail`. Fields that are set will be updated.
"""
input GoodreadsDetailPatch {
  id: Int
  title: String
  isbn13: String
  kindleAsin: String
  marketplaceId: String
  imageUrl: String
  languageCode: String
  publisher: String
  publicationYear: String
  publicationMonth: String
  publicationDay: String
  isEbook: Boolean
  description: String
}

"""A connection to a list of `GoodreadsDetail` values."""
type GoodreadsDetailsConnection {
  """A list of `GoodreadsDetail` objects."""
  nodes: [GoodreadsDetail]!

  """
  A list of edges which contains the `GoodreadsDetail` and cursor to aid in pagination.
  """
  edges: [GoodreadsDetailsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GoodreadsDetail` you could get from the connection.
  """
  totalCount: Int!
}

"""A `GoodreadsDetail` edge in the connection."""
type GoodreadsDetailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GoodreadsDetail` at the end of the edge."""
  node: GoodreadsDetail
}

"""Methods to use when ordering `GoodreadsDetail`."""
enum GoodreadsDetailsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  ISBN13_ASC
  ISBN13_DESC
  KINDLE_ASIN_ASC
  KINDLE_ASIN_DESC
  MARKETPLACE_ID_ASC
  MARKETPLACE_ID_DESC
  IMAGE_URL_ASC
  IMAGE_URL_DESC
  LANGUAGE_CODE_ASC
  LANGUAGE_CODE_DESC
  PUBLISHER_ASC
  PUBLISHER_DESC
  PUBLICATION_YEAR_ASC
  PUBLICATION_YEAR_DESC
  PUBLICATION_MONTH_ASC
  PUBLICATION_MONTH_DESC
  PUBLICATION_DAY_ASC
  PUBLICATION_DAY_DESC
  IS_EBOOK_ASC
  IS_EBOOK_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type KindleAnnotation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  bookId: Int
  bookline: String
  title: String
  author: String
  language: String
  begin: Int
  end: Int
  time: Datetime
  highlight: String
  note: String
  statusline: String
  page: String
  edited: Boolean
  ordernr: Int
  userId: Int
}

"""
A condition to be used against `KindleAnnotation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input KindleAnnotationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `bookId` field."""
  bookId: Int

  """Checks for equality with the object’s `bookline` field."""
  bookline: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `author` field."""
  author: String

  """Checks for equality with the object’s `language` field."""
  language: String

  """Checks for equality with the object’s `begin` field."""
  begin: Int

  """Checks for equality with the object’s `end` field."""
  end: Int

  """Checks for equality with the object’s `time` field."""
  time: Datetime

  """Checks for equality with the object’s `highlight` field."""
  highlight: String

  """Checks for equality with the object’s `note` field."""
  note: String

  """Checks for equality with the object’s `statusline` field."""
  statusline: String

  """Checks for equality with the object’s `page` field."""
  page: String

  """Checks for equality with the object’s `edited` field."""
  edited: Boolean

  """Checks for equality with the object’s `ordernr` field."""
  ordernr: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""An input for mutations affecting `KindleAnnotation`"""
input KindleAnnotationInput {
  id: Int
  bookId: Int
  bookline: String
  title: String
  author: String
  language: String
  begin: Int
  end: Int
  time: Datetime
  highlight: String
  note: String
  statusline: String
  page: String
  edited: Boolean
  ordernr: Int
  userId: Int
}

"""
Represents an update to a `KindleAnnotation`. Fields that are set will be updated.
"""
input KindleAnnotationPatch {
  id: Int
  bookId: Int
  bookline: String
  title: String
  author: String
  language: String
  begin: Int
  end: Int
  time: Datetime
  highlight: String
  note: String
  statusline: String
  page: String
  edited: Boolean
  ordernr: Int
  userId: Int
}

"""A connection to a list of `KindleAnnotation` values."""
type KindleAnnotationsConnection {
  """A list of `KindleAnnotation` objects."""
  nodes: [KindleAnnotation]!

  """
  A list of edges which contains the `KindleAnnotation` and cursor to aid in pagination.
  """
  edges: [KindleAnnotationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `KindleAnnotation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `KindleAnnotation` edge in the connection."""
type KindleAnnotationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `KindleAnnotation` at the end of the edge."""
  node: KindleAnnotation
}

"""Methods to use when ordering `KindleAnnotation`."""
enum KindleAnnotationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BOOK_ID_ASC
  BOOK_ID_DESC
  BOOKLINE_ASC
  BOOKLINE_DESC
  TITLE_ASC
  TITLE_DESC
  AUTHOR_ASC
  AUTHOR_DESC
  LANGUAGE_ASC
  LANGUAGE_DESC
  BEGIN_ASC
  BEGIN_DESC
  END_ASC
  END_DESC
  TIME_ASC
  TIME_DESC
  HIGHLIGHT_ASC
  HIGHLIGHT_DESC
  NOTE_ASC
  NOTE_DESC
  STATUSLINE_ASC
  STATUSLINE_DESC
  PAGE_ASC
  PAGE_DESC
  EDITED_ASC
  EDITED_DESC
  ORDERNR_ASC
  ORDERNR_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `AnnotationsTag`."""
  createAnnotationsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAnnotationsTagInput!
  ): CreateAnnotationsTagPayload

  """Creates a single `Book`."""
  createBook(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBookInput!
  ): CreateBookPayload

  """Creates a single `CalibreAuthor`."""
  createCalibreAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCalibreAuthorInput!
  ): CreateCalibreAuthorPayload

  """Creates a single `CalibreAuthorsBook`."""
  createCalibreAuthorsBook(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCalibreAuthorsBookInput!
  ): CreateCalibreAuthorsBookPayload

  """Creates a single `CalibreMetadatum`."""
  createCalibreMetadatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCalibreMetadatumInput!
  ): CreateCalibreMetadatumPayload

  """Creates a single `GoodreadsDetail`."""
  createGoodreadsDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGoodreadsDetailInput!
  ): CreateGoodreadsDetailPayload

  """Creates a single `KindleAnnotation`."""
  createKindleAnnotation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateKindleAnnotationInput!
  ): CreateKindleAnnotationPayload

  """Creates a single `Tag`."""
  createTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTagInput!
  ): CreateTagPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `AnnotationsTag` using a unique key and a patch."""
  updateAnnotationsTagByAnnotationIdAndTagId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAnnotationsTagByAnnotationIdAndTagIdInput!
  ): UpdateAnnotationsTagPayload

  """Updates a single `Book` using its globally unique id and a patch."""
  updateBook(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookInput!
  ): UpdateBookPayload

  """Updates a single `Book` using a unique key and a patch."""
  updateBookById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookByIdInput!
  ): UpdateBookPayload

  """Updates a single `Book` using a unique key and a patch."""
  updateBookByTitle(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookByTitleInput!
  ): UpdateBookPayload

  """
  Updates a single `CalibreAuthor` using its globally unique id and a patch.
  """
  updateCalibreAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalibreAuthorInput!
  ): UpdateCalibreAuthorPayload

  """Updates a single `CalibreAuthor` using a unique key and a patch."""
  updateCalibreAuthorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalibreAuthorByIdInput!
  ): UpdateCalibreAuthorPayload

  """Updates a single `CalibreAuthor` using a unique key and a patch."""
  updateCalibreAuthorByAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalibreAuthorByAuthorInput!
  ): UpdateCalibreAuthorPayload

  """
  Updates a single `CalibreAuthorsBook` using its globally unique id and a patch.
  """
  updateCalibreAuthorsBook(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalibreAuthorsBookInput!
  ): UpdateCalibreAuthorsBookPayload

  """Updates a single `CalibreAuthorsBook` using a unique key and a patch."""
  updateCalibreAuthorsBookByAuthorIdAndBookId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalibreAuthorsBookByAuthorIdAndBookIdInput!
  ): UpdateCalibreAuthorsBookPayload

  """
  Updates a single `CalibreMetadatum` using its globally unique id and a patch.
  """
  updateCalibreMetadatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalibreMetadatumInput!
  ): UpdateCalibreMetadatumPayload

  """Updates a single `CalibreMetadatum` using a unique key and a patch."""
  updateCalibreMetadatumById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalibreMetadatumByIdInput!
  ): UpdateCalibreMetadatumPayload

  """Updates a single `CalibreMetadatum` using a unique key and a patch."""
  updateCalibreMetadatumByIsbn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCalibreMetadatumByIsbnInput!
  ): UpdateCalibreMetadatumPayload

  """
  Updates a single `GoodreadsDetail` using its globally unique id and a patch.
  """
  updateGoodreadsDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGoodreadsDetailInput!
  ): UpdateGoodreadsDetailPayload

  """Updates a single `GoodreadsDetail` using a unique key and a patch."""
  updateGoodreadsDetailById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGoodreadsDetailByIdInput!
  ): UpdateGoodreadsDetailPayload

  """
  Updates a single `KindleAnnotation` using its globally unique id and a patch.
  """
  updateKindleAnnotation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKindleAnnotationInput!
  ): UpdateKindleAnnotationPayload

  """Updates a single `KindleAnnotation` using a unique key and a patch."""
  updateKindleAnnotationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKindleAnnotationByIdInput!
  ): UpdateKindleAnnotationPayload

  """Updates a single `Tag` using its globally unique id and a patch."""
  updateTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagInput!
  ): UpdateTagPayload

  """Updates a single `Tag` using a unique key and a patch."""
  updateTagById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagByIdInput!
  ): UpdateTagPayload

  """Updates a single `Tag` using a unique key and a patch."""
  updateTagByTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagByTagInput!
  ): UpdateTagPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEmailInput!
  ): UpdateUserPayload

  """Deletes a single `AnnotationsTag` using a unique key."""
  deleteAnnotationsTagByAnnotationIdAndTagId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAnnotationsTagByAnnotationIdAndTagIdInput!
  ): DeleteAnnotationsTagPayload

  """Deletes a single `Book` using its globally unique id."""
  deleteBook(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookInput!
  ): DeleteBookPayload

  """Deletes a single `Book` using a unique key."""
  deleteBookById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookByIdInput!
  ): DeleteBookPayload

  """Deletes a single `Book` using a unique key."""
  deleteBookByTitle(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookByTitleInput!
  ): DeleteBookPayload

  """Deletes a single `CalibreAuthor` using its globally unique id."""
  deleteCalibreAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalibreAuthorInput!
  ): DeleteCalibreAuthorPayload

  """Deletes a single `CalibreAuthor` using a unique key."""
  deleteCalibreAuthorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalibreAuthorByIdInput!
  ): DeleteCalibreAuthorPayload

  """Deletes a single `CalibreAuthor` using a unique key."""
  deleteCalibreAuthorByAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalibreAuthorByAuthorInput!
  ): DeleteCalibreAuthorPayload

  """Deletes a single `CalibreAuthorsBook` using its globally unique id."""
  deleteCalibreAuthorsBook(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalibreAuthorsBookInput!
  ): DeleteCalibreAuthorsBookPayload

  """Deletes a single `CalibreAuthorsBook` using a unique key."""
  deleteCalibreAuthorsBookByAuthorIdAndBookId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalibreAuthorsBookByAuthorIdAndBookIdInput!
  ): DeleteCalibreAuthorsBookPayload

  """Deletes a single `CalibreMetadatum` using its globally unique id."""
  deleteCalibreMetadatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalibreMetadatumInput!
  ): DeleteCalibreMetadatumPayload

  """Deletes a single `CalibreMetadatum` using a unique key."""
  deleteCalibreMetadatumById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalibreMetadatumByIdInput!
  ): DeleteCalibreMetadatumPayload

  """Deletes a single `CalibreMetadatum` using a unique key."""
  deleteCalibreMetadatumByIsbn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCalibreMetadatumByIsbnInput!
  ): DeleteCalibreMetadatumPayload

  """Deletes a single `GoodreadsDetail` using its globally unique id."""
  deleteGoodreadsDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGoodreadsDetailInput!
  ): DeleteGoodreadsDetailPayload

  """Deletes a single `GoodreadsDetail` using a unique key."""
  deleteGoodreadsDetailById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGoodreadsDetailByIdInput!
  ): DeleteGoodreadsDetailPayload

  """Deletes a single `KindleAnnotation` using its globally unique id."""
  deleteKindleAnnotation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKindleAnnotationInput!
  ): DeleteKindleAnnotationPayload

  """Deletes a single `KindleAnnotation` using a unique key."""
  deleteKindleAnnotationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKindleAnnotationByIdInput!
  ): DeleteKindleAnnotationPayload

  """Deletes a single `Tag` using its globally unique id."""
  deleteTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagInput!
  ): DeleteTagPayload

  """Deletes a single `Tag` using a unique key."""
  deleteTagById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagByIdInput!
  ): DeleteTagPayload

  """Deletes a single `Tag` using a unique key."""
  deleteTagByTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagByTagInput!
  ): DeleteTagPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEmailInput!
  ): DeleteUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `AnnotationsTag`."""
  allAnnotationsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AnnotationsTag`."""
    orderBy: [AnnotationsTagsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnotationsTagCondition
  ): AnnotationsTagsConnection

  """Reads and enables pagination through a set of `Book`."""
  allBooks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Book`."""
    orderBy: [BooksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookCondition
  ): BooksConnection

  """Reads and enables pagination through a set of `CalibreAuthor`."""
  allCalibreAuthors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CalibreAuthor`."""
    orderBy: [CalibreAuthorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CalibreAuthorCondition
  ): CalibreAuthorsConnection

  """Reads and enables pagination through a set of `CalibreAuthorsBook`."""
  allCalibreAuthorsBooks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CalibreAuthorsBook`."""
    orderBy: [CalibreAuthorsBooksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CalibreAuthorsBookCondition
  ): CalibreAuthorsBooksConnection

  """Reads and enables pagination through a set of `CalibreMetadatum`."""
  allCalibreMetadata(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CalibreMetadatum`."""
    orderBy: [CalibreMetadataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CalibreMetadatumCondition
  ): CalibreMetadataConnection

  """Reads and enables pagination through a set of `GoodreadsDetail`."""
  allGoodreadsDetails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GoodreadsDetail`."""
    orderBy: [GoodreadsDetailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoodreadsDetailCondition
  ): GoodreadsDetailsConnection

  """Reads and enables pagination through a set of `KindleAnnotation`."""
  allKindleAnnotations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `KindleAnnotation`."""
    orderBy: [KindleAnnotationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KindleAnnotationCondition
  ): KindleAnnotationsConnection

  """Reads and enables pagination through a set of `Tag`."""
  allTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition
  ): TagsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  annotationsTagByAnnotationIdAndTagId(annotationId: Int!, tagId: Int!): AnnotationsTag
  bookById(id: Int!): Book
  bookByTitle(title: String!): Book
  calibreAuthorById(id: Int!): CalibreAuthor
  calibreAuthorByAuthor(author: String!): CalibreAuthor
  calibreAuthorsBookByAuthorIdAndBookId(authorId: Int!, bookId: Int!): CalibreAuthorsBook
  calibreMetadatumById(id: Int!): CalibreMetadatum
  calibreMetadatumByIsbn(isbn: String!): CalibreMetadatum
  goodreadsDetailById(id: Int!): GoodreadsDetail
  kindleAnnotationById(id: Int!): KindleAnnotation
  tagById(id: Int!): Tag
  tagByTag(tag: String!): Tag
  userById(id: Int!): User
  userByEmail(email: String!): User

  """Reads a single `Book` using its globally unique `ID`."""
  book(
    """The globally unique `ID` to be used in selecting a single `Book`."""
    nodeId: ID!
  ): Book

  """Reads a single `CalibreAuthor` using its globally unique `ID`."""
  calibreAuthor(
    """
    The globally unique `ID` to be used in selecting a single `CalibreAuthor`.
    """
    nodeId: ID!
  ): CalibreAuthor

  """Reads a single `CalibreAuthorsBook` using its globally unique `ID`."""
  calibreAuthorsBook(
    """
    The globally unique `ID` to be used in selecting a single `CalibreAuthorsBook`.
    """
    nodeId: ID!
  ): CalibreAuthorsBook

  """Reads a single `CalibreMetadatum` using its globally unique `ID`."""
  calibreMetadatum(
    """
    The globally unique `ID` to be used in selecting a single `CalibreMetadatum`.
    """
    nodeId: ID!
  ): CalibreMetadatum

  """Reads a single `GoodreadsDetail` using its globally unique `ID`."""
  goodreadsDetail(
    """
    The globally unique `ID` to be used in selecting a single `GoodreadsDetail`.
    """
    nodeId: ID!
  ): GoodreadsDetail

  """Reads a single `KindleAnnotation` using its globally unique `ID`."""
  kindleAnnotation(
    """
    The globally unique `ID` to be used in selecting a single `KindleAnnotation`.
    """
    nodeId: ID!
  ): KindleAnnotation

  """Reads a single `Tag` using its globally unique `ID`."""
  tag(
    """The globally unique `ID` to be used in selecting a single `Tag`."""
    nodeId: ID!
  ): Tag

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

type Tag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  tag: String!
  userId: Int

  """Reads and enables pagination through a set of `AnnotationsTag`."""
  annotationsTagsByTagId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AnnotationsTag`."""
    orderBy: [AnnotationsTagsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnotationsTagCondition
  ): AnnotationsTagsConnection!
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `tag` field."""
  tag: String

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""An input for mutations affecting `Tag`"""
input TagInput {
  id: Int
  tag: String!
  userId: Int
}

"""Represents an update to a `Tag`. Fields that are set will be updated."""
input TagPatch {
  id: Int
  tag: String
  userId: Int
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """A list of `Tag` objects."""
  nodes: [Tag]!

  """
  A list of edges which contains the `Tag` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TAG_ASC
  TAG_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
All input for the `updateAnnotationsTagByAnnotationIdAndTagId` mutation.
"""
input UpdateAnnotationsTagByAnnotationIdAndTagIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AnnotationsTag` being updated.
  """
  annotationsTagPatch: AnnotationsTagPatch!
  annotationId: Int!
  tagId: Int!
}

"""The output of our update `AnnotationsTag` mutation."""
type UpdateAnnotationsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AnnotationsTag` that was updated by this mutation."""
  annotationsTag: AnnotationsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `AnnotationsTag`."""
  tagByTagId: Tag

  """An edge for our `AnnotationsTag`. May be used by Relay 1."""
  annotationsTagEdge(
    """The method to use when ordering `AnnotationsTag`."""
    orderBy: [AnnotationsTagsOrderBy!] = [NATURAL]
  ): AnnotationsTagsEdge
}

"""All input for the `updateBookById` mutation."""
input UpdateBookByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Book` being updated.
  """
  bookPatch: BookPatch!
  id: Int!
}

"""All input for the `updateBookByTitle` mutation."""
input UpdateBookByTitleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Book` being updated.
  """
  bookPatch: BookPatch!
  title: String!
}

"""All input for the `updateBook` mutation."""
input UpdateBookInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Book` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Book` being updated.
  """
  bookPatch: BookPatch!
}

"""The output of our update `Book` mutation."""
type UpdateBookPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Book` that was updated by this mutation."""
  book: Book

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GoodreadsDetail` that is related to this `Book`."""
  goodreadsDetailByGoodreadsDetailsId: GoodreadsDetail

  """Reads a single `CalibreMetadatum` that is related to this `Book`."""
  calibreMetadatumByCalibreMetadataId: CalibreMetadatum

  """An edge for our `Book`. May be used by Relay 1."""
  bookEdge(
    """The method to use when ordering `Book`."""
    orderBy: [BooksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BooksEdge
}

"""All input for the `updateCalibreAuthorByAuthor` mutation."""
input UpdateCalibreAuthorByAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CalibreAuthor` being updated.
  """
  calibreAuthorPatch: CalibreAuthorPatch!
  author: String!
}

"""All input for the `updateCalibreAuthorById` mutation."""
input UpdateCalibreAuthorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CalibreAuthor` being updated.
  """
  calibreAuthorPatch: CalibreAuthorPatch!
  id: Int!
}

"""All input for the `updateCalibreAuthor` mutation."""
input UpdateCalibreAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CalibreAuthor` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CalibreAuthor` being updated.
  """
  calibreAuthorPatch: CalibreAuthorPatch!
}

"""The output of our update `CalibreAuthor` mutation."""
type UpdateCalibreAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CalibreAuthor` that was updated by this mutation."""
  calibreAuthor: CalibreAuthor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CalibreAuthor`. May be used by Relay 1."""
  calibreAuthorEdge(
    """The method to use when ordering `CalibreAuthor`."""
    orderBy: [CalibreAuthorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalibreAuthorsEdge
}

"""
All input for the `updateCalibreAuthorsBookByAuthorIdAndBookId` mutation.
"""
input UpdateCalibreAuthorsBookByAuthorIdAndBookIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CalibreAuthorsBook` being updated.
  """
  calibreAuthorsBookPatch: CalibreAuthorsBookPatch!
  authorId: Int!
  bookId: Int!
}

"""All input for the `updateCalibreAuthorsBook` mutation."""
input UpdateCalibreAuthorsBookInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CalibreAuthorsBook` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CalibreAuthorsBook` being updated.
  """
  calibreAuthorsBookPatch: CalibreAuthorsBookPatch!
}

"""The output of our update `CalibreAuthorsBook` mutation."""
type UpdateCalibreAuthorsBookPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CalibreAuthorsBook` that was updated by this mutation."""
  calibreAuthorsBook: CalibreAuthorsBook

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CalibreAuthor` that is related to this `CalibreAuthorsBook`.
  """
  calibreAuthorByAuthorId: CalibreAuthor

  """
  Reads a single `CalibreMetadatum` that is related to this `CalibreAuthorsBook`.
  """
  calibreMetadatumByBookId: CalibreMetadatum

  """An edge for our `CalibreAuthorsBook`. May be used by Relay 1."""
  calibreAuthorsBookEdge(
    """The method to use when ordering `CalibreAuthorsBook`."""
    orderBy: [CalibreAuthorsBooksOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalibreAuthorsBooksEdge
}

"""All input for the `updateCalibreMetadatumById` mutation."""
input UpdateCalibreMetadatumByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CalibreMetadatum` being updated.
  """
  calibreMetadatumPatch: CalibreMetadatumPatch!
  id: Int!
}

"""All input for the `updateCalibreMetadatumByIsbn` mutation."""
input UpdateCalibreMetadatumByIsbnInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CalibreMetadatum` being updated.
  """
  calibreMetadatumPatch: CalibreMetadatumPatch!
  isbn: String!
}

"""All input for the `updateCalibreMetadatum` mutation."""
input UpdateCalibreMetadatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CalibreMetadatum` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CalibreMetadatum` being updated.
  """
  calibreMetadatumPatch: CalibreMetadatumPatch!
}

"""The output of our update `CalibreMetadatum` mutation."""
type UpdateCalibreMetadatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CalibreMetadatum` that was updated by this mutation."""
  calibreMetadatum: CalibreMetadatum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CalibreMetadatum`. May be used by Relay 1."""
  calibreMetadatumEdge(
    """The method to use when ordering `CalibreMetadatum`."""
    orderBy: [CalibreMetadataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CalibreMetadataEdge
}

"""All input for the `updateGoodreadsDetailById` mutation."""
input UpdateGoodreadsDetailByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GoodreadsDetail` being updated.
  """
  goodreadsDetailPatch: GoodreadsDetailPatch!
  id: Int!
}

"""All input for the `updateGoodreadsDetail` mutation."""
input UpdateGoodreadsDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GoodreadsDetail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GoodreadsDetail` being updated.
  """
  goodreadsDetailPatch: GoodreadsDetailPatch!
}

"""The output of our update `GoodreadsDetail` mutation."""
type UpdateGoodreadsDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GoodreadsDetail` that was updated by this mutation."""
  goodreadsDetail: GoodreadsDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GoodreadsDetail`. May be used by Relay 1."""
  goodreadsDetailEdge(
    """The method to use when ordering `GoodreadsDetail`."""
    orderBy: [GoodreadsDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoodreadsDetailsEdge
}

"""All input for the `updateKindleAnnotationById` mutation."""
input UpdateKindleAnnotationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `KindleAnnotation` being updated.
  """
  kindleAnnotationPatch: KindleAnnotationPatch!
  id: Int!
}

"""All input for the `updateKindleAnnotation` mutation."""
input UpdateKindleAnnotationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KindleAnnotation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `KindleAnnotation` being updated.
  """
  kindleAnnotationPatch: KindleAnnotationPatch!
}

"""The output of our update `KindleAnnotation` mutation."""
type UpdateKindleAnnotationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KindleAnnotation` that was updated by this mutation."""
  kindleAnnotation: KindleAnnotation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KindleAnnotation`. May be used by Relay 1."""
  kindleAnnotationEdge(
    """The method to use when ordering `KindleAnnotation`."""
    orderBy: [KindleAnnotationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KindleAnnotationsEdge
}

"""All input for the `updateTagById` mutation."""
input UpdateTagByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  tagPatch: TagPatch!
  id: Int!
}

"""All input for the `updateTagByTag` mutation."""
input UpdateTagByTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  tagPatch: TagPatch!
  tag: String!
}

"""All input for the `updateTag` mutation."""
input UpdateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  tagPatch: TagPatch!
}

"""The output of our update `Tag` mutation."""
type UpdateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tag` that was updated by this mutation."""
  tag: Tag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `updateUserByEmail` mutation."""
input UpdateUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  email: String!
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  id: Int!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  email: String
  password: String
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `password` field."""
  password: String
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: Int
  email: String
  password: String
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: Int
  email: String
  password: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
